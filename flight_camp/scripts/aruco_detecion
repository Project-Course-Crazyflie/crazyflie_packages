#!/usr/bin/env python

import math
import rospy
import tf2_ros
import tf2_geometry_msgs
from tf.transformations import euler_from_quaternion
from geometry_msgs.msg import PoseStamped
from crazyflie_driver.msg import Position

import json
from aruco_msgs.msg import MarkerArray

# Current goal (global state)
msg_detect = None
pubs = None

def detect_callback(msg):
    global detect_msg
    rospy.loginfo("New marker detected " + str(msg))
    msg_detect = msg
   

def publish_cmd(goal):
    # Need to tell TF that the goal was just generated
    goal.header.stamp = rospy.Time.now()
    ropsy.loginf("Transforming from %s to map" % goal.header.frame_id)
    if not tf_buf.can_transform(goal.header.frame_id, 'map', goal.header.stamp):
        rospy.logwarn_throttle(5.0, 'No transform from %s to map' % goal.header.frame_id)
        return

    goal_odom = tf_buf.transform(goal, 'map')

    cmd = Position()

    cmd.header.stamp = rospy.Time.now()
    cmd.header.frame_id = goal_odom.header.frame_id

    cmd.x = goal_odom.pose.position.x
    cmd.y = goal_odom.pose.position.y
    cmd.z = goal_odom.pose.position.z

    roll, pitch, yaw = euler_from_quaternion((goal_odom.pose.orientation.x,
                                              goal_odom.pose.orientation.y,
                                              goal_odom.pose.orientation.z,
                                              goal_odom.pose.orientation.w))

    cmd.yaw = math.degrees(yaw)

    pub_cmd.publish(cmd)


rospy.init_node('aruco_detection')
#sub_goal = rospy.Subscriber('/move_base_simple/goal', PoseStamped, goal_callback)
#pub_cmd  = rospy.Publisher('/cf1/cmd_position', Position, queue_size=2)

tf_buf   = tf2_ros.Buffer()
tf_lstn  = tf2_ros.TransformListener(tf_buf)



def main():
    global pubs
    
    sub_aruco = rospy.Subscriber('/aruco/markers', MarkerArray, detect_callback)
    
    #w_name = rospy.get_param(rospy.get_name() + "/world_name")
    w_name = "/home/robot/dd2419_ws/src/course_packages/dd2419_resources/worlds_json/awesome.world.json" ### Remove
    rospy.loginfo(w_name)

    with open(w_name, 'rb') as f:
        world = json.load(f)

    
    ids = [str(m["id"]) for m in world['markers']]

    #pub_cmd  = rospy.Publisher('/cf1/cmd_position', Position, queue_size=2)
    rate = rospy.Rate(10)  # Hz
    while not rospy.is_shutdown():
        if False:
            publish_cmd(goal)
        rate.sleep()

if __name__ == '__main__':
    main()
