#!/usr/bin/env python

import math
import numpy as np
import rospy
import tf2_ros
import tf2_msgs
import tf2_geometry_msgs
from tf.transformations import euler_from_quaternion, quaternion_from_euler
from geometry_msgs.msg import PoseStamped
from geometry_msgs.msg import PoseArray
from geometry_msgs.msg import TransformStamped, Vector3
from crazyflie_driver.msg import Position

import json
#import common_msgs
from visualization_msgs.msg import Marker as VMarker
from visualization_msgs.msg import MarkerArray as VMarkerArray
from aruco_msgs.msg import MarkerArray
from aruco_msgs.msg import Marker

# Current goal (global state)
goal = None
pub_cmd = None

def transform_from_marker(m):
    t = TransformStamped()
    t.header.stamp = rospy.Time.now()
    t.header.frame_id = 'camera_link'
    t.child_frame_id = 'image/wall_detected
    t.transform.translation = Vector3(*[m.pose.pose.position.x, m.pose.pose.position.y, m.pose.pose.position.z])
    t.transform.rotation = m.pose.pose.orientation
    return t

def detect_callback(msg):
    global goal
    goal = msg
   

def publish_cmd(goal):
    br = tf2_ros.TransformBroadcaster()
    # Need to tell TF that the goal was just generated
    transforms = []
    
    for m in goal.markers:
        rospy.loginfo("ID: " + str(m.id))
        trans_m = transform_from_marker(m)
        transforms.append(trans_m)

        

    br.sendTransform(transforms)
        #rospy.loginfo(br.sendTransform.__doc__)

#pub_cmd  = rospy.Publisher('/tf', VMarkerArray, queue_size=2)
#pub_tf = rospy.Publisher("/tf", tf2_msgs.msg.TFMessage, queue_size=1)
#br = tf2_ros.TransformBroadcaster()

rospy.init_node('wall_detection')
#tf_buf   = tf2_ros.Buffer()
#tf_lstn  = tf2_ros.TransformListener(tf_buf)
#rospy.loginfo(dir(tf_buf))


def main():
    global pub_cmd
    
    sub_walls = rospy.Subscriber('/image/walls', PoseArray, detect_callback)
    
    rate = rospy.Rate(10)  # Hz
    while not rospy.is_shutdown():
        if goal:
            publish_cmd(goal)
        rate.sleep()

if __name__ == '__main__':
    main()
