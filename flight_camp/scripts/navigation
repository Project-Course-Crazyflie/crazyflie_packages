#!/usr/bin/env python

import math
import numpy as np
import rospy
import tf2_ros
import tf2_geometry_msgs
from tf.transformations import euler_from_quaternion, quaternion_from_euler, quaternion_multiply
from geometry_msgs.msg import PoseStamped
from crazyflie_driver.msg import Position

class Navigator:
    def __init__(self, goals):
        self.goals = goals
        self.goal_top = rospy.Publisher('/move_base_simple/goal', PoseStamped, queue_size=2)
        self.cf1_pos_top = rospy.Subscriber('/cf1/pose', PoseStamped, self.cf1_pose_callback)
        #self.goal_idx_top = rospy.Subscriber('/navigation_goal_idx', PoseStamped, self.goal_idx_callback)
        #self.goal_idx_from_top = -1
        #self.pause = 0
        self.cf1_pose = None
        self.goal_idx = 0

    def spin(self):
        
        rate = rospy.Rate(10)  # Hz
        while not rospy.is_shutdown():
            try:
                goal = self.goals[self.goal_idx]
                
            except IndexError:
                self.running = False
                rospy.loginfo("No more waypoint goals")
                return
        
            if self.cf1_pose:
                g = self.goals[self.goal_idx]
                if g.pose.position.z == 0:
                    g.pose.position.z = 0.4
                g = np.array([g.pose.position.x, g.pose.position.y, g.pose.position.z])
                curr = np.array([self.cf1_pose.pose.position.x, self.cf1_pose.pose.position.y, self.cf1_pose.pose.position.z])
                
                diff = g-curr
                err = np.linalg.norm(diff)
                at_waypoint = err < 0.2
                rospy.loginfo("At goal?: " + str(at_waypoint))
                if at_waypoint:
                    #pass
                    self.goal_idx += 1
                
                """
                # TODO: change help functions to handle abs(theta) > 2*pi
                def zeroto2pi(theta):
                    #if theta < 0:
                    #    return theta + 2*np.pi
                    return theta

                target_angle = zeroto2pi(np.arctan2(diff[1], diff[0]))
                q_orig = [self.cf1_pose.pose.orientation.x, 
                        self.cf1_pose.pose.orientation.y,
                        self.cf1_pose.pose.orientation.z,
                        self.cf1_pose.pose.orientation.w]
                curr_angle = zeroto2pi(euler_from_quaternion(q_orig)[2])
                diff_angle = target_angle-curr_angle

                rospy.loginfo("Current: " + str(curr_angle))
                rospy.loginfo("Target: " + str(target_angle))

                def minuspitopi(theta):
                    if theta > np.pi:
                        return -2*np.pi + theta
                    elif theta < -np.pi:
                        return 2*np.pi + theta
                    return theta

                if diff_angle < 0:
                    safe_angle = curr_angle-np.pi/8
                    theta = np.max([target_angle, safe_angle])
                else:
                    safe_angle = curr_angle+np.pi/8
                    theta = np.min([target_angle, safe_angle])
                
                theta = minuspitopi(theta)
                """  
                theta = np.arctan2(diff[1], diff[0])
                rospy.loginfo("New: " + str(theta))
                q_rot = quaternion_from_euler(0, 0, theta,"sxyz")

                #q_new = quaternion_multiply(q_rot, q_orig)
                goal.pose.orientation.x = q_rot[0]
                goal.pose.orientation.y = q_rot[1]
                goal.pose.orientation.z = q_rot[2]
                goal.pose.orientation.w = q_rot[3]
                self.goal_top.publish(goal)
            else:
                rospy.loginfo("Waiting for cf1 pose...")
            rate.sleep()


    def cf1_pose_callback(self, msg):
        self.cf1_pose = msg

    #def goal_idx_callback(self, msg):
    #    self.goal_idx_from_top = msg.pose.position.x

def main():
    rospy.init_node('navigation')
    poses = [(0, 0, 0),
            (5, 0, 0),
            (5.2, 0.5, 0),
            (5, 0.5, 0),
            (4.8, 0.5, 0),
            (4.8, 0, 0),
            (5, 0, 0),
            (5.2, 0, 0),
            (5.2, -1, 0),
            (-5, -1, 0)]


    goals = [PoseStamped() for _ in poses]
    for i, p in enumerate(goals):
        p.header.frame_id = "map"
        p.pose.position.x, p.pose.position.y, p.pose.position.z = poses[i]

    #rospy.loginfo(goals)
    n = Navigator(goals)
    n.spin()

if __name__ == '__main__':
    main()
