#!/usr/bin/env python
#import numpy as np
#import cv2
#from cv_bridge import CvBridge, CvBridgeError
import roslib
import rospy
from std_msgs.msg import Int32MultiArray
from geometry_msgs.msg import PoseArray, Pose
from aruco_msgs.msg import MarkerArray, Marker



#read about PoseArray:
#http://docs.ros.org/melodic/api/geometry_msgs/html/msg/PoseArray.html

boxes_msg = []

def callback(msg):
	global boxes_msg
	boxes_msg = msg
	return

def publish(msg):

	pose_pub.publish(msg)

	return

box_sub = rospy.Subscriber('sign_box', Int32MultiArray, callback)
pose_pub = rospy.Publisher('sign_pose', PoseArray, queue_size=1)

def main():
	global boxes
	rate = rospy.Rate(3) #Hz
	while not rospy.is_shutdown():
		if len(boxes_msg):
			boxes = boxes_msg
			boxes_mgs = []
			#find the depth of found object(s)
						

			#calculate the complete pose of the object(s)
			markers = []
			for b in boxes.data:
				m = Marker()
				m.header.frame_id = "cf1/camera_link"
				m.header.stamp = rospy.Time.now()
				m.pose.position.x = b[0]
				m.pose.position.y = b[1]
				m.pose.position.z = (680-b[3])*1/340  #adjust function
				markers.append(m)
			
			pose_marker = MarkerArray()
			pose_marker = [Marker() for i in markers]
			#publish()
			publish(pose_marker)
		rate.sleep()
	return

if __name__ == '__main__':
	main()
