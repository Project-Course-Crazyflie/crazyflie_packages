#!/usr/bin/env python
#import numpy as np
#import cv2
#from cv_bridge import CvBridge, CvBridgeError
import roslib
import rospy
from std_msgs.msg import Int32MultiArray
from geometry_msgs.msg import PoseWithCovariance
from aruco_msgs.msg import MarkerArray, Marker


boxes_msg = None

def callback(msg):
	global boxes_msg
	boxes_msg = msg
	return

def publish(msg):

	pose_pub.publish(msg)

	return

rospy.init_node("object_poser")
box_sub = rospy.Subscriber('sign_box', Int32MultiArray, callback)
pose_pub = rospy.Publisher('sign_pose', MarkerArray, queue_size=10)

fy = 220.72391163
fx = 221.88078347
real_size = 0.2
n = 6
H, W = 446, 332

def main():
	global boxes_msg
	rate = rospy.Rate(5) #Hz
	while not rospy.is_shutdown():
		if boxes_msg:
			boxes = boxes_msg
			boxes_msg = None
			#find the depth of found object(s)


			#calculate the complete pose of the object(s)
			markers = []
			for i in range(boxes.layout.dim[0].size):
				m = Marker()

				#TODO: calculate covariance
				p = PoseWithCovariance()
				m.header.frame_id = "cf1/camera_link"
				m.header.stamp.secs = boxes.data[n*i+4]
				m.header.stamp.nsecs = boxes.data[n*i+5]

				p.pose.position.z = fy*real_size/(boxes.data[n*i+3])  #adjust function
				p.pose.position.x = (boxes.data[n*i]-W/2)*p.pose.position.z/fx
				p.pose.position.y = (boxes.data[n*i+1]-H/2)*p.pose.position.z/fy
				p.pose.orientation.w = 1


				m.pose = p
				markers.append(m)

			pose_marker = MarkerArray()
			pose_marker.header.frame_id = "cf1/camera_link"
			pose_marker.header.stamp = rospy.Time.now()
			pose_marker.markers = markers  #[Marker() for i in markers]
			#publish()
			publish(pose_marker)
		rate.sleep()
	return

if __name__ == '__main__':
	main()
